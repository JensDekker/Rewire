-keep class j$.time.Clock {
  public j$.time.Instant instant();
  public static j$.time.Clock systemUTC();
}
-keep class j$.time.DateTimeException {
  public <init>(java.lang.String);
}
-keep enum j$.time.DayOfWeek {
  public static j$.time.DayOfWeek[] values();
  j$.time.DayOfWeek FRIDAY;
  j$.time.DayOfWeek MONDAY;
  j$.time.DayOfWeek SATURDAY;
  j$.time.DayOfWeek SUNDAY;
  j$.time.DayOfWeek THURSDAY;
  j$.time.DayOfWeek TUESDAY;
  j$.time.DayOfWeek WEDNESDAY;
}
-keep class j$.time.Duration {
  public int compareTo(j$.time.Duration);
  public int getNano();
  public long getSeconds();
  public static j$.time.Duration ofSeconds(long, long);
  public long toMillis();
  j$.time.Duration ZERO;
}
-keep class j$.time.Instant {
  public j$.time.ZonedDateTime atZone(j$.time.ZoneId);
  public int compareTo(j$.time.Instant);
  public long getEpochSecond();
  public int getNano();
  public int hashCode();
  public boolean isAfter(j$.time.Instant);
  public static j$.time.Instant ofEpochMilli(long);
  public static j$.time.Instant ofEpochSecond(long, long);
  public j$.time.Instant plusNanos(long);
  public j$.time.Instant plusSeconds(long);
  public long toEpochMilli();
  public java.lang.String toString();
  j$.time.Instant EPOCH;
  j$.time.Instant MAX;
  j$.time.Instant MIN;
}
-keep class j$.time.LocalDate {
  public j$.time.ZonedDateTime atStartOfDay(j$.time.ZoneId);
  public int compareTo(j$.time.chrono.ChronoLocalDate);
  public int getDayOfMonth();
  public j$.time.DayOfWeek getDayOfWeek();
  public int getDayOfYear();
  public j$.time.Month getMonth();
  public int getMonthValue();
  public int getYear();
  public int hashCode();
  public boolean isBefore(j$.time.chrono.ChronoLocalDate);
  public int lengthOfMonth();
  public static j$.time.LocalDate now();
  public static j$.time.LocalDate of(int, int, int);
  public static j$.time.LocalDate ofEpochDay(long);
  public static j$.time.LocalDate parse(java.lang.CharSequence);
  public j$.time.LocalDate plusDays(long);
  public j$.time.LocalDate plusMonths(long);
  public long toEpochDay();
  public java.lang.String toString();
  public long until(j$.time.temporal.Temporal, j$.time.temporal.TemporalUnit);
  public j$.time.LocalDate with(j$.time.temporal.TemporalAdjuster);
  public j$.time.LocalDate withDayOfMonth(int);
  public j$.time.LocalDate withMonth(int);
  j$.time.LocalDate MAX;
  j$.time.LocalDate MIN;
}
-keep class j$.time.LocalDateTime {
  public j$.time.ZonedDateTime atZone(j$.time.ZoneId);
  public int compareTo(j$.time.chrono.ChronoLocalDateTime);
  public int getDayOfMonth();
  public j$.time.DayOfWeek getDayOfWeek();
  public int getDayOfYear();
  public int getHour();
  public int getMinute();
  public j$.time.Month getMonth();
  public int getMonthValue();
  public int getNano();
  public int getSecond();
  public int getYear();
  public int hashCode();
  public static j$.time.LocalDateTime of(int, int, int, int, int, int, int);
  public static j$.time.LocalDateTime of(j$.time.LocalDate, j$.time.LocalTime);
  public static j$.time.LocalDateTime ofInstant(j$.time.Instant, j$.time.ZoneId);
  public static j$.time.LocalDateTime parse(java.lang.CharSequence);
  public j$.time.LocalDate toLocalDate();
  public j$.time.LocalTime toLocalTime();
  public java.lang.String toString();
  j$.time.LocalDateTime MAX;
  j$.time.LocalDateTime MIN;
}
-keep class j$.time.LocalTime {
  public int compareTo(j$.time.LocalTime);
  public int getHour();
  public int getMinute();
  public int getNano();
  public int getSecond();
  public int hashCode();
  public static j$.time.LocalTime of(int, int);
  public static j$.time.LocalTime of(int, int, int, int);
  public static j$.time.LocalTime ofNanoOfDay(long);
  public static j$.time.LocalTime ofSecondOfDay(long);
  public static j$.time.LocalTime parse(java.lang.CharSequence);
  public long toNanoOfDay();
  public int toSecondOfDay();
  public java.lang.String toString();
  j$.time.LocalTime MAX;
  j$.time.LocalTime MIN;
}
-keep enum j$.time.Month {
  public static j$.time.Month[] values();
}
-keep class j$.time.OffsetDateTime {
  public static j$.time.OffsetDateTime ofInstant(j$.time.Instant, j$.time.ZoneId);
  public static j$.time.OffsetDateTime parse(java.lang.CharSequence);
  public j$.time.Instant toInstant();
  public java.lang.String toString();
}
-keep class j$.time.Period {
  public int getDays();
  public int getMonths();
  public int getYears();
  public static j$.time.Period of(int, int, int);
}
-keep class j$.time.ZoneId {
  public static java.util.Set getAvailableZoneIds();
  public java.lang.String getId();
  public j$.time.zone.ZoneRules getRules();
  public int hashCode();
  public j$.time.ZoneId normalized();
  public static j$.time.ZoneId of(java.lang.String);
  public static j$.time.ZoneId systemDefault();
  public java.lang.String toString();
}
-keep class j$.time.ZoneOffset {
  public int getTotalSeconds();
  public int hashCode();
  public static j$.time.ZoneOffset of(java.lang.String);
  public static j$.time.ZoneOffset ofHoursMinutesSeconds(int, int, int);
  public static j$.time.ZoneOffset ofTotalSeconds(int);
  public java.lang.String toString();
  j$.time.ZoneOffset UTC;
}
-keep class j$.time.ZonedDateTime {
  public j$.time.ZonedDateTime plusDays(long);
  public j$.time.ZonedDateTime plusMonths(long);
  public j$.time.ZonedDateTime plusNanos(long);
  public long until(j$.time.temporal.Temporal, j$.time.temporal.TemporalUnit);
}
-keep interface j$.time.chrono.ChronoLocalDate {
}
-keep interface j$.time.chrono.ChronoLocalDateTime {
  public j$.time.Instant toInstant(j$.time.ZoneOffset);
}
-keep interface j$.time.chrono.ChronoZonedDateTime {
  public j$.time.Instant toInstant();
}
-keep class j$.time.format.DateTimeParseException {
}
-keep enum j$.time.temporal.ChronoUnit {
  public long between(j$.time.temporal.Temporal, j$.time.temporal.Temporal);
  public j$.time.Duration getDuration();
  j$.time.temporal.ChronoUnit DAYS;
  j$.time.temporal.ChronoUnit MILLIS;
  j$.time.temporal.ChronoUnit MONTHS;
  j$.time.temporal.ChronoUnit NANOS;
  j$.time.temporal.ChronoUnit WEEKS;
  j$.time.temporal.ChronoUnit YEARS;
}
-keep interface j$.time.temporal.Temporal {
}
-keep interface j$.time.temporal.TemporalAdjuster {
}
-keep interface j$.time.temporal.TemporalUnit {
}
-keep class j$.time.zone.ZoneRules {
  public j$.time.ZoneOffset getOffset(j$.time.Instant);
  public boolean isFixedOffset();
}
-keep class j$.util.DesugarTimeZone {
  public static java.util.TimeZone getTimeZone(java.lang.String);
}
